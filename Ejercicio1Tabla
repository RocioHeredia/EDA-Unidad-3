Implemente el TAD Tabla Hash teniendo en cuenta la política de manejo de colisiones direccionamiento abierto, utilizando como función de transformación de claves el método de la división, procesando las claves sinónimas a través de la secuencia de Prueba Lineal y considerando trabajar con 1000 claves numéricas insertandolos una a la vez.
Se pide calcular la Longitud de la Secuencia de Prueba al Buscar una clave teniendo en cuenta:
    1. El tamaño de la tabla Hash no es un número primo.
    2. El tamaño de la tabla Hash sí es un número primo.

import numpy as np


class tablaHash:
    __tamano = int
    __table = []

    def __init__(self, tamano):
        self.__tamano = tamano
        self.__table = np.empty(tamano, dtype=object)

    def funcion_hash(self, clave):
        return int(clave % self.__tamano)

    def pruebaSecuencial(self, clave, i):
        return (self.funcion_hash(clave) + i) % self.__tamano  # (h(k) + i * p (k) ) mod M 0 <= i <= M+1

    def insertar(self, clave, valor):
        i = 0
        # indiceh = self.funcion_hash(clave)
        indice = self.pruebaSecuencial(clave, i)
        while self.__table[indice] is not None and i < self.__tamano:
            i += 1
            indice = self.pruebaSecuencial(clave, i)
        self.__table[indice] = (clave, valor)

    def buscar(self, clave):
        i = 0
        indice = self.pruebaSecuencial(clave, i)

        while self.__table[indice] is not None and self.__table[indice] != clave:
            i += 1
            indice = self.pruebaSecuencial(clave, i)
        return f"{indice}"

    def imprime(self):
        for i, elemento in enumerate(self.__table):
            if elemento is not None:
                clave, valor = elemento
                print(f"Posición: {i}, clave: {clave}, valor: {valor}")
            else:
                print(f"Posición: {i}: vacio")


# N = 29 # Numero no primo
# N = 10 # Numero primo
alfa = 0.7
M = int(N / alfa)
print(M)
hash = tablaHash(M)

hash.insertar(87, 7)
hash.insertar(88, 10)
hash.insertar(89, 9)
print('-------------')
hash.insertar(89, 5)
print('-------------')
hash.insertar(79, 8)
hash.insertar(96, 3)

hash.imprime()

clave = 87
lonSecuencia = hash.buscar(clave)
print(f"Longitud para la clave {clave}: {lonSecuencia}")
        

